package practise;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
interface IOption{
	char getOption();
	void setOption(char s);
	String getText();
	void setText(String str);
}
interface IStudent{
	int getRoll();
	void setRoll(int s);
	String getSname();
	void setSname(String s);
}
interface IQuestion{
	String getQ();	
}
interface ITestPaper{
	void setSub(String s);
	String getSub();
	void setPaper(String s);
	String getPaper();	
}
class Option implements IOption{
	char option;
	String text;
	Option(char option,String text){
		this.option=option;
		this.text=text;
	}
	public char getOption(){
		return this.option;
	}
	public void setOption(char s){
		this.option=s;
	}
	public String getText(){
		return this.text;
	}
	public void setText(String s){
		this.text=s;
	}
}

class Question implements IQuestion{
	String qText;
	ArrayList<Option> al=new ArrayList<>();
	char correctAnswerLetter;
	char studentSelected;
	Question(String qText,ArrayList<Option> al,char correctAnswer){
		this.qText=qText;
		this.al=al;
		this.correctAnswerLetter=correctAnswer;
	}
	Question(String ques,char crr)
	{
		qText=ques;
		correctAnswerLetter=crr;
	}
	public String getQ(){
		return this.qText;
	}
	public void setQ(String s){
		this.qText=s;
	}
	public char getStudentSel(){
		return this.studentSelected;
	}
	public void setStudentSel(char s){
		this.studentSelected=s;
	}
	
}

class TestPaper implements ITestPaper{
	String subj;
	String testPaper;
	ArrayList<Question> ar=new ArrayList<>();
	ArrayList<Question> ac=new ArrayList<>();
	int marks;
	TestPaper(Integer i)
	{
		if(i==1)
		{
			ArrayList<Option> temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Dynamic"));
			temp.add(new Option('B',"Architecture Neutral"));
			temp.add(new Option('C',"Use of pointers"));
			temp.add(new Option('D',"Object-oriented"));
			Question q=new Question("Which of the following is not a Java features?",temp,'C');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Unicode escape sequence"));
			temp.add(new Option('B',"Octal escape"));
			temp.add(new Option('C',"Hexadecimal"));
			temp.add(new Option('D',"Line feed"));
			q=new Question("The \\u0021 article referred to as a",temp,'A');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"JVM"));
			temp.add(new Option('B',"JRE"));
			temp.add(new Option('C',"JDK"));
			temp.add(new Option('D',"JDB"));
			q=new Question("_____ is used to find and fix bugs in the Java programs. ",temp,'D');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"James Gosling"));
			temp.add(new Option('B',"M. P Java"));
			temp.add(new Option('C',"Charel Babbage"));
			temp.add(new Option('D',"Blais Pascal"));
			q=new Question("Who is known as father of Java Programming Language?",temp,'A');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Selection statements"));
			temp.add(new Option('B',"Loop Statements"));
			temp.add(new Option('C',"Transfer statements"));
			temp.add(new Option('D',"Pause Statement"));
			q=new Question("In java control statements break, continue, return, try-catch-finally and assert belongs to?",temp,'C');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"double"));
			temp.add(new Option('B',"switch"));
			temp.add(new Option('C',"then"));
			temp.add(new Option('D',"instanceof"));
			q=new Question("Which of the following are not Java keywords ?",temp,'C');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"()"));
			temp.add(new Option('B',"++"));
			temp.add(new Option('C',"*"));
			temp.add(new Option('D',">>"));
			q=new Question("Which of these have highest precedence?",temp,'A');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Integer"));
			temp.add(new Option('B',"Character"));
			temp.add(new Option('C',"Boolean"));
			temp.add(new Option('D',"Float"));
			q=new Question("Which of these is returned by operator '&' ?",temp,'B');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Uppercase L"));
			temp.add(new Option('B',"Lowercase L"));
			temp.add(new Option('C',"Long"));
			temp.add(new Option('D',"Both A and B"));
			q=new Question("Data type long literals are appended by _____",temp,'D');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Sumatra"));
			temp.add(new Option('B',"J++"));
			temp.add(new Option('C',"Oak"));
			temp.add(new Option('D',"Pine"));
			q=new Question("Java language was initially called as ________",temp,'D');
			this.ar.add(q);
		}
		else
		{
			ArrayList<Option> temp=new  ArrayList<Option>();
			temp.add(new Option('A',"DML(Data Manipulation Language)"));
			temp.add(new Option('B',"Query"));
			temp.add(new Option('C',"Relational Schema"));
			temp.add(new Option('D',"DDL(Data Definition Language)"));
			Question q=new Question("Which of the following is generally used for performing tasks like creating the structure of the relations, deleting relation? ",temp,'D');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"One class may have many teachers"));
			temp.add(new Option('B',"One teacher can have many classes"));
			temp.add(new Option('C',"Many classes may have many teachers"));
			temp.add(new Option('D',"Many teachers may have many classes"));
			q=new Question("What do you mean by one to many relationships? ",temp,'B');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"File Allocation Tree"));
			temp.add(new Option('B',"File Allocation Table"));
			temp.add(new Option('C',"File Allocation Graph"));
			temp.add(new Option('D',"All of the above"));
			q=new Question("The term \"FAT\" is stands for_____ ",temp,'B');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"8GB"));
			temp.add(new Option('B',"4GB"));
			temp.add(new Option('C',"4TB"));
			temp.add(new Option('D',"None of the above"));
			q=new Question("Which of the following can be considered as the maximum size that is supported by FAT?",temp,'B');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"New Technology File System"));
			temp.add(new Option('B',"New Tree File System"));
			temp.add(new Option('C',"New Table type File System"));
			temp.add(new Option('D',"Both A and C"));
			q=new Question("The term \"NTFS\" refers to which one of the following?",temp,'A');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Data Management"));
			temp.add(new Option('B',"Data Mining"));
			temp.add(new Option('C',"Data Warehouse"));
			temp.add(new Option('D',"Both B and C"));
			q=new Question("A huge collection of the information or data accumulated form several different sources is known as ________:",temp,'C');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Data redundancy"));
			temp.add(new Option('B',"Data recovery tool"));
			temp.add(new Option('C',"Data mining"));
			temp.add(new Option('D',"Both B and C"));
			q=new Question("Which of the following can be used to extract or filter the data & information from the data warehouse?",temp,'C');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Data Repository"));
			temp.add(new Option('B',"Data Inconsistency"));
			temp.add(new Option('C',"Data Mining"));
			temp.add(new Option('D',"Data Redundancy"));
			q=new Question("Which one of the following refers to the copies of the same data (or information) occupying the memory space at multiple places.",temp,'D');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Directory"));
			temp.add(new Option('B',"Sub Data"));
			temp.add(new Option('C',"Warehouse"));
			temp.add(new Option('D',"Meta Data"));
			q=new Question("Which one of the following refers to the \"data about data\"?",temp,'D');
			this.ar.add(q);
			temp=new  ArrayList<Option>();
			temp.add(new Option('A',"Conceptual Level"));
			temp.add(new Option('B',"Physical Level"));
			temp.add(new Option('C',"File Level"));
			temp.add(new Option('D',"Logical Level"));
			q=new Question("Which of the following refers to the level of data abstraction that describes exactly how the data actually stored?",temp,'B');
			this.ar.add(q);
		}
	}
	void attempt()
	{
	    Scanner sc=new Scanner(System.in);
	    for(int i=0;i<10;i++)
	    {
	        System.out.println((i+1)+" "+ar.get(i).qText);
	        for(int j=0;j<4;j++)
	        {
	            System.out.println(ar.get(i).al.get(j).option+"."+ar.get(i).al.get(j).text);
	        }
	        System.out.println("Enter choice");
	        char studentSelected=sc.next().charAt(0);
			ar.get(i).studentSelected=studentSelected;
	        if(studentSelected==ar.get(i).correctAnswerLetter)
	        {
	            this.marks+=1;
	        }
	    }
	    
	}
	void correctAnswers()
	{
		System.out.println("Correct answer for this paper are: ");
		 for(int i=0;i<10;i++)
		    {
				System.out.println((i+1)+" "+ar.get(i).qText);
				System.out.println("Correct answer for this question is: "+ar.get(i).correctAnswerLetter);
				System.out.println();
		    }
		
	}
	public int getMarks(){
		return this.marks;
	}
	public void setMarks(int s){
		this.marks=s;
	}
	public void setSub(String s){
		this.subj=s;
	}
	public String getSub(){
		return this.subj;
	}
	public void setPaper(String s){
		this.testPaper=s;
	}
	public String getPaper(){
		return this.testPaper;
	}
}

class Student implements IStudent{
	int rollNo;
	String sname;
	List<TestPaper> l=new ArrayList<TestPaper>();
	Student(int r,String s,TestPaper l){
		this.rollNo=r;
		this.sname=s;
		this.l.add(l);
	}
	public int getRoll(){
		return this.rollNo;
	}
	public void setRoll(int s){
		this.rollNo=s;
	}
	public String getSname(){
		return this.sname;
	}
	public void setSname(String s){
		this.sname=s;
	}
}
public class Task3
{
	public static void main(String args[]){
		int rollNo;
		String sname;
		int[] choice=new int[2];
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter your RollNo:");
		rollNo=sc.nextInt();
		System.out.println("Enter your name:");
		sname=sc.next();
		System.out.println("You will be attempting two tests");
		System.out.println("Enter 1 to attempt Java");	
		System.out.println("Enter 2 to attempt DBMS");
		System.out.println("Enter your first choice and second choice: ");
		for(int i=0;i<2;i++) 
		{
			choice[i]=sc.nextInt();	
		}
		System.out.println("NOTE: Enter your choice in capital!");
		TestPaper t=new TestPaper(choice[0]);
		Student s=new Student(rollNo,sname,t);
		System.out.println("All the best! :) "+s.getSname()+" for your Java test");
		t.attempt();
		System.out.println("Marks in test 1 are: "+t.marks);
		System.out.println();
		TestPaper t1=new TestPaper(choice[1]);
		System.out.println("All the best! :) "+s.getSname()+" for your DBMS test");
		System.out.println();
		System.out.println();
		t1.attempt();
		System.out.println("Marks in test 2 are: "+t1.marks);
		t.correctAnswers();
		t1.correctAnswers();
	}
	
}
